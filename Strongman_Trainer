--// Service \\--
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

--// Variables \\--
local Player = Players.LocalPlayer
local Draggables = Workspace:WaitForChild("PlayerDraggables"):WaitForChild(Player.UserId)
local Workout = ReplicatedStorage:WaitForChild("StrongMan_UpgradeStrength")

--// Get Goal \\--
local Areas = Workspace:WaitForChild("Areas")
function GetGoal()
    for _, A_1 in next, Areas:GetChildren() do
        local Goal = A_1:FindFirstChild("Goal", true)
        if Goal and Goal:FindFirstChildWhichIsA("TouchTransmitter") then
            return Goal
        end
    end
    return false
end

--// Exploit Fix \\--
if not pcall(function() return syn.protect_gui end) then
    syn = {}
    syn.protect_gui = function(A_1)
        A_1.Parent = game:GetService("CoreGui")
    end
end

--// Send Notification \\--
function Notification(A_1, A_2)
    StarterGui:SetCore("SendNotification", {
        Title = A_1,
        Text = A_2,
        Duration = 6
    })
end

--// UI Library \\--
local Library = loadstring(game:HttpGetAsync('https://pastebin.com/raw/edJT9EGX'))()
local Window = Library:CreateWindow("Trainer by Ezpi#0474")

--// Exploit Check \\--
if fireproximityprompt and firetouchinterest then
    local Toggle_1 = Window:AddToggle({
        text = 'Auto Pull',
        flag = 'Enabled',
        callback = function()
            -- Check
            if not Library.flags.Enabled then
                return
            end

            -- Get Goal
            local Goal = GetGoal()

            -- Get Closest Draggable
            local Closest = false
            local Distance = 120
            for _, A_1 in next, Areas:GetDescendants() do
                if A_1:IsA("ProximityPrompt") and Player:DistanceFromCharacter(A_1.Parent.Position) < Distance and A_1:FindFirstAncestor("DraggableItems") then
                    Closest = A_1
                    Distance = Player:DistanceFromCharacter(A_1.Parent.Position)
                end
            end
            
            -- Check Closest
            if Closest == false then
                Notification("Ezpi's Trainer", "No draggable found. :(")
            end

            -- Stay Put
            local CloseCFrame = Closest.Parent.CFrame
            Player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
            Player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)

            -- NoClip
            local NoClip = RunService.RenderStepped:Connect(function()
                Player.Character.Humanoid:ChangeState(11)
                Player.Character.HumanoidRootPart.CFrame = CloseCFrame
            end)

            -- Loop
            while Closest and Goal and Library.flags.Enabled and wait() do
                -- Variable
                local T_1 = Draggables:GetChildren()

                -- Use Closest Draggable
                if #T_1 <= 3 then
                    fireproximityprompt(Closest, 1)
                end

                -- Pull to end
                for _, A_1 in next, T_1 do
                    firetouchinterest(Goal, A_1, 0)
                    firetouchinterest(Goal, A_1, 1)
                end
            end

            -- Make sure to finish it
            wait(0.3)
            if Goal then
                for _, A_1 in next, Draggables:GetChildren() do
                    firetouchinterest(Goal, A_1, 0)
                    firetouchinterest(Goal, A_1, 1)
                end
            end
            NoClip:Disconnect()
        end
    })
    if Best ~= false then
        Window:AddButton({
            text = "Best Draggable",
            callback = function()
                --// Load Best Area \\--
                local Highest = false
                local HighestArea = "Area" .. #Areas:GetChildren()
                for _, A_1 in next, Areas:GetChildren() do
                    if string.find(A_1.Name, HighestArea) then
                        print(A_1.Name, HighestArea)
                        Highest = A_1
                    end
                end
                if Highest ~= false and #Highest.DraggableItems:GetChildren() <= 2 then
                    local Model = Highest:FindFirstChildWhichIsA("Model")
                    if Model then
                        local ModelCFrame = Model:GetModelCFrame()
                        repeat
                            pcall(function()
                                Player.Character.HumanoidRootPart.CFrame = ModelCFrame
                            end)
                            wait()
                        until #Highest.DraggableItems:GetChildren() >= 4
                    end
                end

                --// Get Best Draggable \\--
                if Highest ~= false then
                    local HighestValue = 0
                    local Best = false
                    for _, A_1 in next, Highest.DraggableItems:GetDescendants() do
                        if A_1:IsA("ProximityPrompt") and A_1:FindFirstAncestor("DraggableItems") then
                            local Worth = A_1.Parent.Parent:FindFirstChild("Coins")
                            if Worth and Worth.Value > HighestValue then
                                HighestValue = Worth.Value
                                Best = A_1.Parent.CFrame
                            end
                        end
                    end
                    if Best ~= false then
                        Player.Character.HumanoidRootPart.CFrame = Best + Vector3.new(0, Player.Character.HumanoidRootPart.Size.Y, 0)
                    end
                else
                    Notification("Ezpi's Trainer", "Area not found. :(")
                end
            end
        })
    end
else
    Window:AddLabel({
        text = "Buy Synapse X"
    })
    Window:AddLabel({
        text = "x.synapse.to"
    })
end
Library:Init()

--// Draggable Fix \\--
Draggables.ChildAdded:Connect(function(A_1)
    if Library.flags.Enabled then
        A_1.CanCollide = false
        A_1.Anchored = true
    end
end)

--// Auto-Workout \\--
while wait(0.2) do
    if Player.Character and Player.Character:FindFirstChild("Weights") then
        spawn(function()
            Workout:InvokeServer()
        end)
    end
end
